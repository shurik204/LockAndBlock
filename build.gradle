plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
    id "com.github.breadmoirai.github-release" version "2.4.1"
    id 'org.jetbrains.changelog' version '2.2.0'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url 'https://maven.wispforest.io' }
}

fabricApi {
    configureDataGeneration()
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "io.wispforest:lavender:${project.lavender_version}"

    modApi "com.terraformersmc:modmenu:7.2.2"

    annotationProcessor modImplementation("io.wispforest:owo-lib:${project.owo_version}")

    include "io.wispforest:owo-sentinel:${project.owo_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    inputs.property "lavender_version", project.lavender_version
    filteringCharset "UTF-8"
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version,
                "lavender_version": project.lavender_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

//changelog {
//    repositoryUrl = "https://github.com/andersmmg/LockAndBlock"
//    groups = ["Added", "Changed", "Deprecated", "Removed", "Fixed"]
//    keepUnreleasedSection = true
//    version = mod_version
//}

//modrinth {
//    token = MODRINTH_TOKEN
//    projectId = project.modrinth_id
//    versionType = "release"
//    uploadFile = remapJar
//    syncBodyFrom = rootProject.file("README.md").text
//    changelog = project.changelog.renderItem(project.changelog.getLatest(), Changelog.OutputType.MARKDOWN)
//    tasks.modrinth.dependsOn(tasks.modrinthSyncBody)
//    versionName = "${project.mod_version}+${project.minecraft_version} ${project.mod_name}"
//    dependencies {
//        required.project "fabric-api"
//        required.project "owo-lib"
//        required.project "lavender"
//    }
////    debugMode = true
//}

//githubRelease {
//    token = GITHUB_TOKEN
//    owner = "andersmmg"
//    draft = false
//    releaseName = "${mod_version}+${minecraft_version}"
//    body = project.changelog.renderItem(project.changelog.getLatest(), Changelog.OutputType.MARKDOWN)
//    releaseAssets = remapJar
//    allowUploadToExisting = false
////    dryRun = true
//}

//tasks.register('uploadRelease') {
//    dependsOn 'modrinth', 'githubRelease'
//}